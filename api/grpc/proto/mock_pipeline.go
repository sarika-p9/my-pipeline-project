// Code generated by MockGen. DO NOT EDIT.
// Source: api/grpc/proto/pipeline_grpc.pb.go

// Package proto is a generated GoMock package.
package proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPipelineServiceClient is a mock of PipelineServiceClient interface.
type MockPipelineServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceClientMockRecorder
}

// MockPipelineServiceClientMockRecorder is the mock recorder for MockPipelineServiceClient.
type MockPipelineServiceClientMockRecorder struct {
	mock *MockPipelineServiceClient
}

// NewMockPipelineServiceClient creates a new mock instance.
func NewMockPipelineServiceClient(ctrl *gomock.Controller) *MockPipelineServiceClient {
	mock := &MockPipelineServiceClient{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineServiceClient) EXPECT() *MockPipelineServiceClientMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockPipelineServiceClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePipeline", varargs...)
	ret0, _ := ret[0].(*CreatePipelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelineServiceClientMockRecorder) CreatePipeline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelineServiceClient)(nil).CreatePipeline), varargs...)
}

// ListPipelines mocks base method.
func (m *MockPipelineServiceClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelines", varargs...)
	ret0, _ := ret[0].(*ListPipelinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockPipelineServiceClientMockRecorder) ListPipelines(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockPipelineServiceClient)(nil).ListPipelines), varargs...)
}

// MockPipelineServiceServer is a mock of PipelineServiceServer interface.
type MockPipelineServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceServerMockRecorder
}

// MockPipelineServiceServerMockRecorder is the mock recorder for MockPipelineServiceServer.
type MockPipelineServiceServerMockRecorder struct {
	mock *MockPipelineServiceServer
}

// NewMockPipelineServiceServer creates a new mock instance.
func NewMockPipelineServiceServer(ctrl *gomock.Controller) *MockPipelineServiceServer {
	mock := &MockPipelineServiceServer{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineServiceServer) EXPECT() *MockPipelineServiceServerMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockPipelineServiceServer) CreatePipeline(arg0 context.Context, arg1 *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0, arg1)
	ret0, _ := ret[0].(*CreatePipelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelineServiceServerMockRecorder) CreatePipeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelineServiceServer)(nil).CreatePipeline), arg0, arg1)
}

// ListPipelines mocks base method.
func (m *MockPipelineServiceServer) ListPipelines(arg0 context.Context, arg1 *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", arg0, arg1)
	ret0, _ := ret[0].(*ListPipelinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockPipelineServiceServerMockRecorder) ListPipelines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockPipelineServiceServer)(nil).ListPipelines), arg0, arg1)
}

// mustEmbedUnimplementedPipelineServiceServer mocks base method.
func (m *MockPipelineServiceServer) mustEmbedUnimplementedPipelineServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPipelineServiceServer")
}

// mustEmbedUnimplementedPipelineServiceServer indicates an expected call of mustEmbedUnimplementedPipelineServiceServer.
func (mr *MockPipelineServiceServerMockRecorder) mustEmbedUnimplementedPipelineServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPipelineServiceServer", reflect.TypeOf((*MockPipelineServiceServer)(nil).mustEmbedUnimplementedPipelineServiceServer))
}

// MockUnsafePipelineServiceServer is a mock of UnsafePipelineServiceServer interface.
type MockUnsafePipelineServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePipelineServiceServerMockRecorder
}

// MockUnsafePipelineServiceServerMockRecorder is the mock recorder for MockUnsafePipelineServiceServer.
type MockUnsafePipelineServiceServerMockRecorder struct {
	mock *MockUnsafePipelineServiceServer
}

// NewMockUnsafePipelineServiceServer creates a new mock instance.
func NewMockUnsafePipelineServiceServer(ctrl *gomock.Controller) *MockUnsafePipelineServiceServer {
	mock := &MockUnsafePipelineServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePipelineServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePipelineServiceServer) EXPECT() *MockUnsafePipelineServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPipelineServiceServer mocks base method.
func (m *MockUnsafePipelineServiceServer) mustEmbedUnimplementedPipelineServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPipelineServiceServer")
}

// mustEmbedUnimplementedPipelineServiceServer indicates an expected call of mustEmbedUnimplementedPipelineServiceServer.
func (mr *MockUnsafePipelineServiceServerMockRecorder) mustEmbedUnimplementedPipelineServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPipelineServiceServer", reflect.TypeOf((*MockUnsafePipelineServiceServer)(nil).mustEmbedUnimplementedPipelineServiceServer))
}
